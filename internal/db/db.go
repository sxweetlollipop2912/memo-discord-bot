// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createMemoStmt, err = db.PrepareContext(ctx, createMemo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMemo: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteMemoStmt, err = db.PrepareContext(ctx, deleteMemo); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMemo: %w", err)
	}
	if q.getMemoStmt, err = db.PrepareContext(ctx, getMemo); err != nil {
		return nil, fmt.Errorf("error preparing query GetMemo: %w", err)
	}
	if q.getPendingRemindersStmt, err = db.PrepareContext(ctx, getPendingReminders); err != nil {
		return nil, fmt.Errorf("error preparing query GetPendingReminders: %w", err)
	}
	if q.getReminderCountsStmt, err = db.PrepareContext(ctx, getReminderCounts); err != nil {
		return nil, fmt.Errorf("error preparing query GetReminderCounts: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listAllPendingMemosInChannelStmt, err = db.PrepareContext(ctx, listAllPendingMemosInChannel); err != nil {
		return nil, fmt.Errorf("error preparing query ListAllPendingMemosInChannel: %w", err)
	}
	if q.listPendingMemosStmt, err = db.PrepareContext(ctx, listPendingMemos); err != nil {
		return nil, fmt.Errorf("error preparing query ListPendingMemos: %w", err)
	}
	if q.markMemoAsSentStmt, err = db.PrepareContext(ctx, markMemoAsSent); err != nil {
		return nil, fmt.Errorf("error preparing query MarkMemoAsSent: %w", err)
	}
	if q.updateUserDiscordChannelStmt, err = db.PrepareContext(ctx, updateUserDiscordChannel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserDiscordChannel: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createMemoStmt != nil {
		if cerr := q.createMemoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMemoStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteMemoStmt != nil {
		if cerr := q.deleteMemoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMemoStmt: %w", cerr)
		}
	}
	if q.getMemoStmt != nil {
		if cerr := q.getMemoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMemoStmt: %w", cerr)
		}
	}
	if q.getPendingRemindersStmt != nil {
		if cerr := q.getPendingRemindersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPendingRemindersStmt: %w", cerr)
		}
	}
	if q.getReminderCountsStmt != nil {
		if cerr := q.getReminderCountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReminderCountsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listAllPendingMemosInChannelStmt != nil {
		if cerr := q.listAllPendingMemosInChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAllPendingMemosInChannelStmt: %w", cerr)
		}
	}
	if q.listPendingMemosStmt != nil {
		if cerr := q.listPendingMemosStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPendingMemosStmt: %w", cerr)
		}
	}
	if q.markMemoAsSentStmt != nil {
		if cerr := q.markMemoAsSentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing markMemoAsSentStmt: %w", cerr)
		}
	}
	if q.updateUserDiscordChannelStmt != nil {
		if cerr := q.updateUserDiscordChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserDiscordChannelStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	createMemoStmt                   *sql.Stmt
	createUserStmt                   *sql.Stmt
	deleteMemoStmt                   *sql.Stmt
	getMemoStmt                      *sql.Stmt
	getPendingRemindersStmt          *sql.Stmt
	getReminderCountsStmt            *sql.Stmt
	getUserStmt                      *sql.Stmt
	listAllPendingMemosInChannelStmt *sql.Stmt
	listPendingMemosStmt             *sql.Stmt
	markMemoAsSentStmt               *sql.Stmt
	updateUserDiscordChannelStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		createMemoStmt:                   q.createMemoStmt,
		createUserStmt:                   q.createUserStmt,
		deleteMemoStmt:                   q.deleteMemoStmt,
		getMemoStmt:                      q.getMemoStmt,
		getPendingRemindersStmt:          q.getPendingRemindersStmt,
		getReminderCountsStmt:            q.getReminderCountsStmt,
		getUserStmt:                      q.getUserStmt,
		listAllPendingMemosInChannelStmt: q.listAllPendingMemosInChannelStmt,
		listPendingMemosStmt:             q.listPendingMemosStmt,
		markMemoAsSentStmt:               q.markMemoAsSentStmt,
		updateUserDiscordChannelStmt:     q.updateUserDiscordChannelStmt,
	}
}
