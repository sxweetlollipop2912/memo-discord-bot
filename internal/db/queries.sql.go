// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMemo = `-- name: CreateMemo :one
INSERT INTO memos (discord_user_id, discord_channel_id, content, remind_at)
VALUES ($1, $2, $3, $4)
RETURNING id, discord_user_id, discord_channel_id, content, created_at, remind_at, sent
`

type CreateMemoParams struct {
	DiscordUserID    string    `json:"discord_user_id"`
	DiscordChannelID string    `json:"discord_channel_id"`
	Content          string    `json:"content"`
	RemindAt         time.Time `json:"remind_at"`
}

func (q *Queries) CreateMemo(ctx context.Context, arg CreateMemoParams) (Memo, error) {
	row := q.queryRow(ctx, q.createMemoStmt, createMemo,
		arg.DiscordUserID,
		arg.DiscordChannelID,
		arg.Content,
		arg.RemindAt,
	)
	var i Memo
	err := row.Scan(
		&i.ID,
		&i.DiscordUserID,
		&i.DiscordChannelID,
		&i.Content,
		&i.CreatedAt,
		&i.RemindAt,
		&i.Sent,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, username, discord_channel_id)
VALUES ($1, $2, $3)
RETURNING user_id, username, discord_channel_id
`

type CreateUserParams struct {
	UserID           string         `json:"user_id"`
	Username         string         `json:"username"`
	DiscordChannelID sql.NullString `json:"discord_channel_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.UserID, arg.Username, arg.DiscordChannelID)
	var i User
	err := row.Scan(&i.UserID, &i.Username, &i.DiscordChannelID)
	return i, err
}

const deleteMemo = `-- name: DeleteMemo :exec
DELETE FROM memos
WHERE id = $1 AND discord_user_id = $2
`

type DeleteMemoParams struct {
	ID            int32  `json:"id"`
	DiscordUserID string `json:"discord_user_id"`
}

func (q *Queries) DeleteMemo(ctx context.Context, arg DeleteMemoParams) error {
	_, err := q.exec(ctx, q.deleteMemoStmt, deleteMemo, arg.ID, arg.DiscordUserID)
	return err
}

const getMemo = `-- name: GetMemo :one
SELECT id, discord_user_id, discord_channel_id, content, created_at, remind_at, sent FROM memos
WHERE id = $1
`

func (q *Queries) GetMemo(ctx context.Context, id int32) (Memo, error) {
	row := q.queryRow(ctx, q.getMemoStmt, getMemo, id)
	var i Memo
	err := row.Scan(
		&i.ID,
		&i.DiscordUserID,
		&i.DiscordChannelID,
		&i.Content,
		&i.CreatedAt,
		&i.RemindAt,
		&i.Sent,
	)
	return i, err
}

const getPendingReminders = `-- name: GetPendingReminders :many
SELECT id, discord_user_id, discord_channel_id, content, created_at, remind_at, sent
FROM memos
WHERE sent = false AND remind_at <= $1
ORDER BY remind_at
`

func (q *Queries) GetPendingReminders(ctx context.Context, remindAt time.Time) ([]Memo, error) {
	rows, err := q.query(ctx, q.getPendingRemindersStmt, getPendingReminders, remindAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memo
	for rows.Next() {
		var i Memo
		if err := rows.Scan(
			&i.ID,
			&i.DiscordUserID,
			&i.DiscordChannelID,
			&i.Content,
			&i.CreatedAt,
			&i.RemindAt,
			&i.Sent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReminderCounts = `-- name: GetReminderCounts :many
SELECT discord_channel_id, COUNT(*) as count
FROM memos
WHERE discord_user_id = $1 AND sent = false
GROUP BY discord_channel_id
`

type GetReminderCountsRow struct {
	DiscordChannelID string `json:"discord_channel_id"`
	Count            int64  `json:"count"`
}

func (q *Queries) GetReminderCounts(ctx context.Context, discordUserID string) ([]GetReminderCountsRow, error) {
	rows, err := q.query(ctx, q.getReminderCountsStmt, getReminderCounts, discordUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReminderCountsRow
	for rows.Next() {
		var i GetReminderCountsRow
		if err := rows.Scan(&i.DiscordChannelID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, username, discord_channel_id FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.Username, &i.DiscordChannelID)
	return i, err
}

const listAllPendingMemosInChannel = `-- name: ListAllPendingMemosInChannel :many
SELECT id, discord_user_id, discord_channel_id, content, created_at, remind_at, sent
FROM memos
WHERE discord_channel_id = $1
  AND remind_at > NOW()
  AND sent = false
ORDER BY remind_at ASC
`

func (q *Queries) ListAllPendingMemosInChannel(ctx context.Context, discordChannelID string) ([]Memo, error) {
	rows, err := q.query(ctx, q.listAllPendingMemosInChannelStmt, listAllPendingMemosInChannel, discordChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memo
	for rows.Next() {
		var i Memo
		if err := rows.Scan(
			&i.ID,
			&i.DiscordUserID,
			&i.DiscordChannelID,
			&i.Content,
			&i.CreatedAt,
			&i.RemindAt,
			&i.Sent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingMemos = `-- name: ListPendingMemos :many
SELECT id, discord_user_id, discord_channel_id, content, created_at, remind_at, sent FROM memos
WHERE discord_user_id = $1 AND discord_channel_id = $2 AND sent = false
ORDER BY remind_at
`

type ListPendingMemosParams struct {
	DiscordUserID    string `json:"discord_user_id"`
	DiscordChannelID string `json:"discord_channel_id"`
}

func (q *Queries) ListPendingMemos(ctx context.Context, arg ListPendingMemosParams) ([]Memo, error) {
	rows, err := q.query(ctx, q.listPendingMemosStmt, listPendingMemos, arg.DiscordUserID, arg.DiscordChannelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Memo
	for rows.Next() {
		var i Memo
		if err := rows.Scan(
			&i.ID,
			&i.DiscordUserID,
			&i.DiscordChannelID,
			&i.Content,
			&i.CreatedAt,
			&i.RemindAt,
			&i.Sent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markMemoAsSent = `-- name: MarkMemoAsSent :exec
UPDATE memos
SET sent = true
WHERE id = $1
`

func (q *Queries) MarkMemoAsSent(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.markMemoAsSentStmt, markMemoAsSent, id)
	return err
}

const updateUserDiscordChannel = `-- name: UpdateUserDiscordChannel :exec
UPDATE users
SET discord_channel_id = $2
WHERE user_id = $1
`

type UpdateUserDiscordChannelParams struct {
	UserID           string         `json:"user_id"`
	DiscordChannelID sql.NullString `json:"discord_channel_id"`
}

func (q *Queries) UpdateUserDiscordChannel(ctx context.Context, arg UpdateUserDiscordChannelParams) error {
	_, err := q.exec(ctx, q.updateUserDiscordChannelStmt, updateUserDiscordChannel, arg.UserID, arg.DiscordChannelID)
	return err
}
